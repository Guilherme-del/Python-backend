version: '3.8'

services:

  mongo1:
    image: mongo:7.0
    hostname: mongo1
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo1:27017',priority:1},{_id:1,host:'mongo2:27018',priority:0.5},{_id:2,host:'mongo3:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"
    networks:
      - mean_net
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  mongo2:
    image: mongo:7.0
    hostname: mongo2
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    volumes:
      - "mongo2_data:/data/db"
      - "mongo2_config:/data/configdb"
    networks:
      - mean_net
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  mongo3:
    image: mongo:7.0
    hostname: mongo3
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - 27019:27019
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"
    networks:
      - mean_net
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  backend:
    image: mean_backend # Usar a imagem construída
    ports:
      - "8000:8000"
    environment:
      MONGO_URL: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
    networks:
      - mean_net
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  frontend:
    image: mean_frontend # Usar a imagem construída
    ports:
      - "4200:80"
    networks:
      - mean_net
    depends_on:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

networks:
  mean_net:
    driver: overlay  # Driver overlay para o Swarm

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  mongo1_config:
  mongo2_config:
  mongo3_config:
